import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:note_app/cubits/cubit_display_notes/display_notes_cubit.dart';
import 'package:note_app/cubits/add_note_cubit/add_note_cubit.dart';
import 'package:note_app/cubits/edit_note_cubit/edit_note_cubit.dart';
import 'package:note_app/cubits/delete_note_cubit/delete_note_cubit.dart';
import 'package:note_app/views/widgets/note_card.dart';

class NotesListView extends StatelessWidget {
  const NotesListView({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<DisplayNotesCubit>(create: (_) => DisplayNotesCubit()),
        BlocProvider<AddNoteCubit>(create: (_) => AddNoteCubit()),
        BlocProvider<EditNoteCubit>(create: (_) => EditNoteCubit()),
        BlocProvider<DeleteNoteCubit>(create: (_) => DeleteNoteCubit()),
      ],
      child: Builder(
        builder:
            (context) => MultiBlocListener(
              listeners: [
                BlocListener<AddNoteCubit, AddNoteState>(
                  listener: (context, state) {
                    if (state is AddNoteSuccess) {
                      BlocProvider.of<DisplayNotesCubit>(
                        context,
                      ).displayNotes();
                    }
                    if (state is AddNoteFailure) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(state.errorMessage)),
                      );
                    }
                  },
                ),
                BlocListener<EditNoteCubit, EditNoteState>(
                  listener: (context, state) {
                    if (state is EditNoteSuccess) {
                      BlocProvider.of<DisplayNotesCubit>(
                        context,
                      ).displayNotes();
                    }
                    if (state is EditNoteFailure) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(state.errorMessage)),
                      );
                    }
                  },
                ),
                BlocListener<DeleteNoteCubit, DeleteNoteState>(
                  listener: (context, state) {
                    if (state is DeleteNoteSuccess) {
                      BlocProvider.of<DisplayNotesCubit>(
                        context,
                      ).displayNotes();
                    }
                    if (state is DeleteNoteFailure) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(state.errorMessage)),
                      );
                    }
                  },
                ),
              ],
              child: BlocBuilder<DisplayNotesCubit, DisplayNotesState>(
                builder: (context, displayState) {
                  if (displayState is DisplayNotesLoading) {
                    return const Center(
                      child: SizedBox(
                        width: 24.0,
                        height: 24.0,
                        child: CircularProgressIndicator(strokeWidth: 2.0),
                      ),
                    );
                  } else if (displayState is DisplayNotesFaild) {
                    return Center(child: Text(displayState.errorMessage));
                  } else if (displayState is DisplayNotesSuccess) {
                    final notesList = displayState.notesList;
                    return notesList.isEmpty
                        ? const Center(child: Text('No notes available'))
                        : Expanded(
                          child: ListView.builder(
                            itemCount: notesList.length,
                            itemBuilder: (context, index) {
                              return NoteCard(note: notesList[index]);
                            },
                          ),
                        );
                  }
                  return const Center(child: Text('Starting...'));
                },
              ),
            ),
      ),
    );
  }
}
